// Usage:
//   node generate.js
//   node generate.js ~/path/to/grist
//
// By default script will look for grist in ~/dev/grist
// To use globally installed dts-bundle version use:
//   env NODE_PATH=$(npm root --quiet -g) node generate.js


const dts = require('dts-bundle');
const path = require('path');
const fs = require('fs');
const homedir = require('os').homedir();

// REPLACE THIS PATH WITH YOUR PATH TO YOUR GRIST FOLDER or pass as argument to either core or enterprise version
// You need to built Grist first.
const GRIST_PATH = process.argv[2] || path.resolve(homedir, 'dev/grist');

// Detect Grist version (EE or Core)
const eePath = path.resolve(GRIST_PATH, '_build/core/app/plugin/grist-plugin-api.d.ts');
const corePath = path.resolve(GRIST_PATH, '_build/app/plugin/grist-plugin-api.d.ts');
const pluginPath = fs.existsSync(eePath) ? eePath : corePath;

console.log(`Using ${pluginPath === eePath ? 'GristEE' : 'GristCore'} located in ${pluginPath}`)

// Bundle grist-plugin.api.d.ts, grain-rpc.d.ts and ts-interface-checker.d.ts to three files.
const pluginOptions = {
  main: pluginPath,
  name: 'grist',
  out: path.resolve(__dirname, 'grist.d.ts'),
};
const rpcOptions = {
  main: path.resolve(GRIST_PATH, 'node_modules/grain-rpc/dist/lib/index.d.ts'),
  name: 'grain-rpc',
  out: path.resolve(__dirname, 'grains-rpc.d.ts'),
};
const tsInterfaceCheckerOptions = {
  main: path.resolve(GRIST_PATH, 'node_modules/ts-interface-checker/dist/index.d.ts'),
  name: 'ts-interface-checker',
  out: path.resolve(__dirname, 'ts-interface-checker.d.ts'),
};
const packageOptions = [pluginOptions, rpcOptions, tsInterfaceCheckerOptions];
packageOptions.forEach((options) => { dts.bundle(options); });

// Get bundle contents, and regenerate api_deps.js by combining those source
// codes into a single string variable.
const contents = packageOptions.map(f => fs.readFileSync(f.out).toString()).join("\n").replace(/`/g, "'");

const dtsFile = path.resolve(__dirname, "grist-plugin-api.d.ts");
fs.writeFileSync(dtsFile, contents);

const apiDepsFile = path.resolve(__dirname, "api_deps.js");
const apiDepsContent = `
// THIS FILE WAS AUTOGENERATED BY ./generate.js
const definition = \`
${contents.replace(/\$/g, "\\$")}
\`;
`.trim();
fs.writeFileSync(apiDepsFile, apiDepsContent);

// Remove intermediate files
packageOptions.forEach((options) => { fs.unlinkSync(options.out); });
